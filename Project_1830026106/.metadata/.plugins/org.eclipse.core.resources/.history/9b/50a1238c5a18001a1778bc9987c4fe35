import java.util.ArrayList;

public class FinanceOffice {
	private String name;
	private ArrayList<Payer> payers;
	private ArrayList<ModelListener> listener;
	private ArrayList<Integer> history;

	public FinanceOffice(String name) {
		this.name = name;
		payers = new ArrayList<Payer>();
		listener = new ArrayList<ModelListener>();// An arraylist of model listeners that needs to be notified every time the finance office changes.
		history=new ArrayList<>();
		history.add(0);//When the finance office is created, its total amount of debt is zero.
	}

	/**
	 * an addListener method that takes a ModelListner as argument and adds it to
	 * the arraylist of ModelListner
	 * 
	 * @param l--ModelListener
	 */
	public void addListener(ModelListener l) {
		listener.add(l);
	}

	private void notifyListeners() {
		for (ModelListener l : listener) {
			l.update();// Tell the listener that something changed
		}
	}

	public void addPayer(Payer payer) {
		payers.add(payer);
		history.add(totalDebt());//keep track of how the total amount of debt of all the payers of the finance office changes over time. 
		notifyListeners();// a change is made to the finance office's data
	}

	/**
	 * calculate the total amount of debt of all the payers of the finance office
	 * @return  total
	 */
	public int totalDebt() {
		int total = 0;
		for (Payer payer : payers) {
			total = total + payer.getDebt();
		}
		return total;
	}

	/**
	 *  calculate the current amount of debt for this payer
	 * @param 	name
	 * @return	payer.getDebt();
	 * @throws UnknownPayerException
	 */
	public int getDebt(String name) throws UnknownPayerException {
		for (Payer payer : payers) {
			if (payer.getName().equalsIgnoreCase(name)) {
				return payer.getDebt();
			}
		}
		throw new UnknownPayerException("Payer " + name + " unknown");
	}

	/**
	 * Payer pay that amount of money to that payer
	 * 
	 * @param name
	 * @param amount
	 * @throws NegativeSalaryException
	 * @throws UnknownPayerException
	 */
	public void pay(String name, int amount) throws NegativeSalaryException, UnknownPayerException {
		boolean flag = true;
		for (Payer payer : payers) {
			if (payer.getName().equalsIgnoreCase(name)) {
				payer.pay(amount);
				history.add(totalDebt());//keep track of how the total amount of debt of all the payers of the finance office changes over time. 
				flag = false;
			}
		}
		if (flag) {
			throw new UnknownPayerException("Payer " + name + " Unknown");
		}
		notifyListeners();// a change is made to the finance office's data
	}
	/**
	 * a getHistory method that returns as result the arraylist of integers which is the finance office's history. 
	 * @return history
	 */
	public ArrayList<Integer> getHistory(){
		return history;
	}

	public static void testFinanceOffice() throws NegativeSalaryException, UnknownPayerException {
		FinanceOffice f = new FinanceOffice("UIC FO");
		Student s = new Student("Steve", 10000);
		Employee e = new Employee("Philippe", 10000);
		FacultyMember fm = new FacultyMember("Leon", 10000);
		f.addPayer(e);
		f.addPayer(fm);
		f.addPayer(s);
		System.out.println(f.totalDebt() == -10000);
		System.out.println(f.getDebt("Steve") == 10000);
		System.out.println(f.getDebt("Philippe") == -10000);
		System.out.println(f.getDebt("Leon") == -10000);
		try {
			f.pay("Steve", 2000);
			System.out.println(f.getDebt("Steve") == 8000);
			System.out.println(f.totalDebt() ==-12000);
		} catch (NegativeSalaryException e1) {
			System.out.println(e1.getMessage());
		} catch (UnknownPayerException e1) {
			System.out.println(e1.getMessage());
		}
		try {
			f.pay("Philippe", 2000);
			System.out.println(f.getDebt("Philippe")==-8000);
			System.out.println(f.totalDebt() );
		} catch (NegativeSalaryException e1) {
			System.out.println(e1.getMessage());
		} catch (UnknownPayerException e1) {
			System.out.println(e1.getMessage());
		}
		try {
			f.pay("Leon", 20000);
			System.out.println(f.getDebt("Leon") == 10000);
			System.out.println(f.totalDebt() == 14000);
		} catch (NegativeSalaryException e1) {
			System.out.println(e1.getMessage());
		} catch (UnknownPayerException e1) {
			System.out.println(e1.getMessage());
		}
		try {
			f.pay("John", 2000);
		} catch (NegativeSalaryException e1) {
			System.out.println(e1.getMessage());
		} catch (UnknownPayerException e1) {
			System.out.println(e1.getMessage().equalsIgnoreCase("Payer John Unknown"));
		}
	}
}
